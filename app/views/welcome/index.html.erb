<%= form_tag date_path, :method => 'get' do %>
	<h1>Usuários e suas fotos do mês <%= select_tag(:this_month, options_for_select([[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]), prompt: @params[:this_month]) %> ano de <%= select_tag(:the_year, options_for_select([[2015],[2016],[2017],[2018]]), prompt: @params[:the_year]) %><%= submit_tag("Vai") %></h1>
<% end %>

<ul>
<% @permagram.all_users.each do |user| %>
<li>
   <%= user["username"] %><br>
   Number of photos: <%= @permagram.get_user_photos_of_month(user["objectId"]).count %><br>
   <% @permagram.get_user_photos_of_month(user["objectId"]).each do |photo| %>
 	<%= link_to "#{photo['image']['url']}", photo["image"]["url"] %> and date of creation: <%= photo["createdAt"] %> <br>
	<% end %>


</li>
<% end %>

<%= @params %>
</ul>

<button class="button">Clique</button>

<script src='//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'/>
<script src='/js/jszip/jszip.min.js'/>
<script src='/js/jszip/jszip-utils.min.js'/>
<script src='/js/jszip/FileSaver.js'/>
<script>
$(document).ready(function(){ 

	  $('.button').on('click touchstart',function() {


				function downloadAllImages("imgLinks"){
				 var zip = new JSZip();
				 var deferreds = [];
				 for(var i=0; i<imgLinks.length; i++)
				 {
				  deferreds.push( addToZip(zip, imgLinks[i], i) );
				 }
				 $.when.apply(window, deferreds).done(generateZip);
				}
				function generateZip(zip)
				{
				 var content = zip.generate({type:"blob"});
				 // see FileSaver.js
				 saveAs(content, "downloadImages.zip");
				}
				function addToZip(zip, imgLink, i) {
				  var deferred = $.Deferred();
				  JSZipUtils.getBinaryContent(imgLink, function (err, data) {
				    if(err) {
				      alert("Problem happened when download img: " + imgLink);
				      console.erro("Problem happened when download img: " + imgLink);
				      deferred.resolve(zip); // ignore this error: just logging
				      // deferred.reject(zip); // or we may fail the download
				    } else {
				      zip.file("picture"+i+".jpg", data, {binary:true});
				      deferred.resolve(zip);
				    }
				 });
				return deferred;
				}
	  });
 });
</script>
